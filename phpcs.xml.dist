<?xml version="1.0"?>
<ruleset name="WordPress Coding Standards for Plugin Check Plugin">
	<description>Sniffs for WordPress plugins, with minor modifications for Performance</description>

	<rule ref="PHPCompatibility"/>
	<config name="testVersion" value="7.0-"/>

	<rule ref="WordPress-Core">
		<exclude name="WordPress.Files.FileName"/>
	</rule>
	<rule ref="WordPress-Docs"/>
	<rule ref="WordPress.WP.I18n"/>
	<config name="text_domain" value="plugin-check,default"/>

	<arg value="ps"/>
	<arg name="extensions" value="php"/>

	<file>./cli.php</file>
	<file>./plugin.php</file>
	<file>./includes</file>
	<file>./tests/phpunit</file>

	<exclude-pattern>*/tests/phpunit/testdata/plugins/*</exclude-pattern>

	<!-- Do not require docblocks for unit tests -->
	<rule ref="Squiz.Commenting.FunctionComment.Missing">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FileComment.Missing">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.ClassComment.Missing">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.ClassComment.SpacingAfter">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FunctionComment.MissingParamTag">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="Generic.Commenting.DocComment.Empty">
    	<exclude-pattern>tests/*</exclude-pattern>
    </rule>
	<rule ref="Generic.Commenting.DocComment.MissingShort">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.VariableComment.Missing">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="Squiz.Commenting.FunctionCommentThrowTag.Missing">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>

	<!-- Do not apply filename rules for unit tests -->
	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>
	<rule ref="WordPress.Files.FileName.InvalidClassFileName">
		<exclude-pattern>tests/*</exclude-pattern>
	</rule>

	<!-- Do not apply compatibility rules to allow using the modern PHPUnit functionality -->
	<rule ref="PHPCompatibility.FunctionDeclarations.NewReturnTypeDeclarations.stringFound">
		<exclude-pattern>tests/phpunit/utils/*</exclude-pattern>
	</rule>
	<rule ref="PHPCompatibility.FunctionDeclarations.NewReturnTypeDeclarations.boolFound">
		<exclude-pattern>tests/phpunit/utils/*</exclude-pattern>
	</rule>

	<!-- Disallows grouped use declarations. -->
	<rule ref="SlevomatCodingStandard.Namespaces.DisallowGroupUse" />
	<!-- Disallows leading backslash in use statement. -->
	<rule ref="SlevomatCodingStandard.Namespaces.UseDoesNotStartWithBackslash" />
	<!-- Checks whether uses at the top of a file are alphabetically sorted. -->
	<rule ref="SlevomatCodingStandard.Namespaces.AlphabeticallySortedUses" />

	<!-- Prohibits uses from the same namespace. -->
	<rule ref="SlevomatCodingStandard.Namespaces.UseFromSameNamespace" />
	<!-- Looks for unused imports from other namespaces. -->
	<rule ref="SlevomatCodingStandard.Namespaces.UnusedUses">
	<properties>
	  <property name="searchAnnotations" value="true" />
	</properties>
	</rule>
	<!-- All references to functions, classes and constants should import using a use statement. -->
	  <rule ref="SlevomatCodingStandard.Namespaces.ReferenceUsedNamesOnly">
		 <properties>
			<property name="allowFullyQualifiedGlobalFunctions" value="true" />
			<property name="allowFullyQualifiedGlobalClasses" value="true" />
			<property name="allowFullyQualifiedGlobalConstants" value="true" />
			<property name="allowFallbackGlobalFunctions" value="true" />
			<property name="allowFallbackGlobalConstants" value="true" />
			<property
			name="allowFullyQualifiedNameForCollidingClasses"
			value="true"
		  />
		</properties>
	  </rule>

</ruleset>
